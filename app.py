# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hHMkEZ-nEBw8spCveMvuhBjJXaudItrY
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load trained model
model = joblib.load("tuned_gradient_boosting_model.pkl")

# Streamlit UI setup
st.set_page_config(page_title="HR Salary Predictor", layout="centered")
st.title("ðŸ’¼ HR Salary Prediction Dashboard")
st.write("Fill in employee details to predict their monthly salary.")

# User input form
with st.form("salary_form"):
    age = st.slider("Age", 18, 60, 30)
    business_travel = st.selectbox("Business Travel", ["Travel_Rarely", "Travel_Frequently", "Non-Travel"])
    daily_rate = st.number_input("Daily Rate", 100, 1500, value=500)
    department = st.selectbox("Department", ["Sales", "Research & Development", "Human Resources"])
    distance = st.slider("Distance From Home (miles)", 1, 30, 5)
    education = st.selectbox("Education Level", [1, 2, 3, 4, 5])
    education_field = st.selectbox("Education Field", ["Life Sciences", "Other", "Medical", "Marketing", "Technical Degree", "Human Resources"])
    env_satisfaction = st.selectbox("Environment Satisfaction", [1, 2, 3, 4])
    gender = st.selectbox("Gender", ["Male", "Female"])
    hourly_rate = st.number_input("Hourly Rate", 30, 100, value=60)
    job_involvement = st.selectbox("Job Involvement", [1, 2, 3, 4])
    job_level = st.selectbox("Job Level", [1, 2, 3, 4, 5])
    job_role = st.selectbox("Job Role", ["Sales Executive", "Research Scientist", "Laboratory Technician", "Manufacturing Director", "Healthcare Representative", "Manager", "Sales Representative", "Research Director", "Human Resources"])
    job_satisfaction = st.selectbox("Job Satisfaction", [1, 2, 3, 4])
    marital_status = st.selectbox("Marital Status", ["Single", "Married", "Divorced"])
    monthly_rate = st.number_input("Monthly Rate", 1000, 20000, value=10000)
    num_companies = st.number_input("Number of Companies Worked", 0, 10, value=2)
    overtime = st.selectbox("OverTime", ["Yes", "No"])
    salary_hike = st.slider("Percent Salary Hike", 10, 25, value=15)
    performance = st.selectbox("Performance Rating", [1, 2, 3, 4])
    rel_satisfaction = st.selectbox("Relationship Satisfaction", [1, 2, 3, 4])
    stock_option = st.selectbox("Stock Option Level", [0, 1, 2, 3])
    total_years = st.number_input("Total Working Years", 0, 40, value=10)
    trainings = st.number_input("Training Times Last Year", 0, 10, value=2)
    worklife = st.selectbox("Work-Life Balance", [1, 2, 3, 4])
    years_company = st.number_input("Years at Company", 0, 30, value=5)
    years_role = st.number_input("Years in Current Role", 0, 20, value=4)
    years_promo = st.number_input("Years Since Last Promotion", 0, 15, value=2)
    years_manager = st.number_input("Years With Current Manager", 0, 20, value=3)

    submitted = st.form_submit_button("Predict Salary")

if submitted:
    input_data = pd.DataFrame([{
        "Age": age,
        "BusinessTravel": business_travel,
        "DailyRate": daily_rate,
        "Department": department,
        "DistanceFromHome": distance,
        "Education": education,
        "EducationField": education_field,
        "EnvironmentSatisfaction": env_satisfaction,
        "Gender": gender,
        "HourlyRate": hourly_rate,
        "JobInvolvement": job_involvement,
        "JobLevel": job_level,
        "JobRole": job_role,
        "JobSatisfaction": job_satisfaction,
        "MaritalStatus": marital_status,
        "MonthlyRate": monthly_rate,
        "NumCompaniesWorked": num_companies,
        "OverTime": overtime,
        "PercentSalaryHike": salary_hike,
        "PerformanceRating": performance,
        "RelationshipSatisfaction": rel_satisfaction,
        "StockOptionLevel": stock_option,
        "TotalWorkingYears": total_years,
        "TrainingTimesLastYear": trainings,
        "WorkLifeBalance": worklife,
        "YearsAtCompany": years_company,
        "YearsInCurrentRole": years_role,
        "YearsSinceLastPromotion": years_promo,
        "YearsWithCurrManager": years_manager
    }])

    # Ensure preprocessing is consistent with training (apply label encoding / one-hot / scaling as needed)
    # For demo purposes, assume input_data is already compatible

    prediction = model.predict(input_data)[0]
    st.success(f"Predicted Monthly Income: ðŸ’° ${prediction:,.2f}")
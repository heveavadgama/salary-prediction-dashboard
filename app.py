# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hHMkEZ-nEBw8spCveMvuhBjJXaudItrY
"""

import streamlit as st
import pandas as pd
import joblib

# Load trained model
model = joblib.load("tuned_gradient_boosting_model.pkl")

# Page setup
st.set_page_config(page_title="üíº HR Salary Predictor", layout="wide")
st.title("üíº HR Salary Prediction Dashboard")
st.markdown("Use this interactive form to predict an employee's **monthly salary** based on various HR attributes.")

# Sidebar for general info
with st.sidebar:
    st.header("üìä About this App")
    st.markdown("""
    This app uses a machine learning model trained on HR data to estimate **monthly salary**.
    
    - Input features like age, job role, education, etc.
    - Works best with accurate data.
    - Built with üíñ using Streamlit.
    """)

# Form layout
with st.form("salary_form"):
    st.subheader("üßë‚Äçüíº Employee Information")

    col1, col2, col3 = st.columns(3)
    with col1:
        age = st.slider("Age", 18, 60, 30)
        gender = st.selectbox("Gender", ["Male", "Female"])
        education = st.selectbox("Education Level üéì", [1, 2, 3, 4, 5])
        education_field = st.selectbox("Education Field", ["Life Sciences", "Other", "Medical", "Marketing", "Technical Degree", "Human Resources"])
        department = st.selectbox("Department", ["Sales", "Research & Development", "Human Resources"])
        business_travel = st.selectbox("Business Travel ‚úàÔ∏è", ["Travel_Rarely", "Travel_Frequently", "Non-Travel"])
        marital_status = st.selectbox("Marital Status", ["Single", "Married", "Divorced"])

    with col2:
        daily_rate = st.number_input("Daily Rate ($)", 100, 1500, value=500)
        hourly_rate = st.number_input("Hourly Rate ($)", 30, 100, value=60)
        monthly_rate = st.number_input("Monthly Rate ($)", 1000, 20000, value=10000)
        distance = st.slider("Distance From Home (mi)", 1, 30, 5)
        job_level = st.selectbox("Job Level", [1, 2, 3, 4, 5])
        job_role = st.selectbox("Job Role", [
            "Sales Executive", "Research Scientist", "Laboratory Technician",
            "Manufacturing Director", "Healthcare Representative", "Manager",
            "Sales Representative", "Research Director", "Human Resources"
        ])
        overtime = st.selectbox("OverTime", ["Yes", "No"])

    with col3:
        performance = st.selectbox("Performance Rating", [1, 2, 3, 4])
        salary_hike = st.slider("Percent Salary Hike (%)", 10, 25, value=15)
        stock_option = st.selectbox("Stock Option Level", [0, 1, 2, 3])
        num_companies = st.number_input("Companies Worked", 0, 10, value=2)
        total_years = st.number_input("Total Working Years", 0, 40, value=10)
        trainings = st.number_input("Trainings Last Year", 0, 10, value=2)

    # Satisfaction & Engagement
    st.subheader("üß† Satisfaction & Engagement")
    col4, col5, col6 = st.columns(3)
    with col4:
        env_satisfaction = st.selectbox("Environment Satisfaction", [1, 2, 3, 4])
        job_satisfaction = st.selectbox("Job Satisfaction", [1, 2, 3, 4])

    with col5:
        rel_satisfaction = st.selectbox("Relationship Satisfaction", [1, 2, 3, 4])
        worklife = st.selectbox("Work-Life Balance", [1, 2, 3, 4])

    with col6:
        job_involvement = st.selectbox("Job Involvement", [1, 2, 3, 4])

    # Experience
    st.subheader("üìà Experience Metrics")
    col7, col8, col9 = st.columns(3)
    with col7:
        years_company = st.number_input("Years at Company", 0, 30, value=5)

    with col8:
        years_role = st.number_input("Years in Current Role", 0, 20, value=4)

    with col9:
        years_promo = st.number_input("Years Since Last Promotion", 0, 15, value=2)
        years_manager = st.number_input("Years With Current Manager", 0, 20, value=3)

    # Submit button
    submitted = st.form_submit_button("üìä Predict Salary")

if submitted:
    input_data = pd.DataFrame([{
        "Age": age,
        "BusinessTravel": business_travel,
        "DailyRate": daily_rate,
        "Department": department,
        "DistanceFromHome": distance,
        "Education": education,
        "EducationField": education_field,
        "EnvironmentSatisfaction": env_satisfaction,
        "Gender": gender,
        "HourlyRate": hourly_rate,
        "JobInvolvement": job_involvement,
        "JobLevel": job_level,
        "JobRole": job_role,
        "JobSatisfaction": job_satisfaction,
        "MaritalStatus": marital_status,
        "MonthlyRate": monthly_rate,
        "NumCompaniesWorked": num_companies,
        "OverTime": overtime,
        "PercentSalaryHike": salary_hike,
        "PerformanceRating": performance,
        "RelationshipSatisfaction": rel_satisfaction,
        "StockOptionLevel": stock_option,
        "TotalWorkingYears": total_years,
        "TrainingTimesLastYear": trainings,
        "WorkLifeBalance": worklife,
        "YearsAtCompany": years_company,
        "YearsInCurrentRole": years_role,
        "YearsSinceLastPromotion": years_promo,
        "YearsWithCurrManager": years_manager
    }])

    # Label Encoding to Education
    education_le = joblib.load("encoders/label_encoder_education.pkl")
    input_data['Education'] = education_le.transform(input_data['Education'])

    # One-Hot Encoding 
    categorical_cols = ['JobRole', 'MaritalStatus', 'OverTime', 'WorkLifeBalance', 'Department', 'Gender']
    input_data_encoded = pd.get_dummies(input_data, columns=categorical_cols, drop_first=True)

    # Align columns with model training 
    model_features = joblib.load("model_features.pkl")

    # Add missing columns (due to drop_first or categories not in current input)
    for col in model_features:
        if col not in input_data_encoded:
            input_data_encoded[col] = 0

    # Ensure correct column order
    input_data_encoded = input_data_encoded[model_features]

    # Predict
    prediction = model.predict(input_data_encoded)[0]
    st.markdown("---")
    st.success("‚úÖ Prediction Complete!")
    st.metric(label="üí∞ Estimated Monthly Salary", value=f"${prediction:,.2f}")
